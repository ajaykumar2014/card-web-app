{"version":3,"sources":["config.js","components/TextField.js","components/Button.js","components/UserCCardFrom.js","actions/index.js","containers/UserCCardFormContainer.js","components/Row.js","components/Table.js","containers/TableLayer.js","containers/GridViewContainer.js","App.js","reducers/saveUserCardDetailsReducer.js","serviceWorker.js","index.js"],"names":["require","config","module","exports","SAVE_CARD_DETAIL_URL","FETCH_CARD_DETAIL_URL","port","process","PORT","TextField","props","className","htmlFor","id","label","type","placeholder","onChange","handleChange","required","isRequired","Button","value","UserCCardFrom","newCardInfoSubmit","e","preventDefault","fieldValidation","saveNewCardDetails","state","newCardInfo","name","cnumber","climit","undefined","length","alert","a","axios","post","then","res","data","status","code","setState","errorMessage","updateStore","message","catch","error","console","updateError","cardHolderNameHandler","cardHolderName","target","cardNumberHandler","cardNumber","cardLimitHandler","cardlimit","uuid","v1","style","width","this","onSubmit","Component","connect","dispatch","cardDetails","payload","UserCCardFormContainer","Row","row","Table","dataSet","rowData","scope","TableSheet","map","key","TableLayer","cardInfoDetails","isLoading","fetch","method","headers","Accept","response","ok","json","refreshCardInfoDetails","fetchUserCardDetails","cardDetailsReducer","GridViewContainer","reducer","combineReducers","action","concat","store","createStore","composeWithDevTools","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1cb51210.chunk.js","sourcesContent":["const dotenv = require('dotenv');\ndotenv.config();\nmodule.exports = {\n  SAVE_CARD_DETAIL_URL: \"http://localhost:7777/card/add\",\n  FETCH_CARD_DETAIL_URL: \"http://localhost:7777/card/fetch\",\n  port: process.env.PORT\n};","\nimport React from 'react'\n\nfunction TextField(props){\n\n    return(\n        <div className=\"form-group mx-sm-3 mb-2\">\n        <label htmlFor={props.id}>{props.label}</label>\n        <input type={props.type} className={props.className} id={props.id} placeholder={props.label} onChange={props.handleChange} required={props.isRequired}/>\n        </div>\n    );\n};\n\nexport default TextField;","\nimport React from 'react'\n\nfunction Button(props) {\n    return (\n        <div>\n            <input className={props.className} type={props.type} value={props.label} />\n        </div>\n    );\n};\n\nexport default Button;","import React,{Component} from 'react'\nimport { connect } from 'react-redux'\nimport {TextField,Button} from './index'\nimport  { addNewCardDetails }  from '../actions/index'\nimport axios from 'axios';\nimport uuid from 'uuid'\n\nconst config = require('../config')\n\nclass UserCCardFrom extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            newCardInfo:{\n                id:uuid.v1(),\n                name:'',\n                cnumber:null,\n                climit:null\n            },\n            errorMessage:undefined\n        }\n    }\n\n    newCardInfoSubmit = (e) => {\n        e.preventDefault()\n        this.fieldValidation();\n        this.saveNewCardDetails();\n    }\n\n    fieldValidation = () =>{\n        const {name,cnumber,climit} = this.state.newCardInfo;\n        if(name === undefined || name.length === 0 ){\n            alert('Card Holder Name can\\'t be empty.');\n        }\n        if(cnumber === 0 || cnumber === null ){\n            alert('Card Number can\\'t be empty.'); \n        }\n\n        if(climit === 0 || climit === null ){\n            alert('Card Limit can\\'t be zero.'); \n        }\n    }\n\n    saveNewCardDetails = async () =>{\n       await axios.post(config.SAVE_CARD_DETAIL_URL, this.state.newCardInfo)\n          .then(res=>{\n              if(res.data.status==='success' && res.data.code=== 200 ){\n                this.setState({\n                    errorMessage : undefined\n                });\n                this.props.updateStore(this.state.newCardInfo);\n              }else{\n                  this.setState({\n                      errorMessage : res.data.message\n                  })\n              }\n          })\n          .catch(error=> {\n            console.error(error);\n          });\n    }\n\n    updateError = (error) =>this.setState({errorMessage : error});\n\n    cardHolderNameHandler = (e) => {\n        let cardHolderName = e.target.value;\n\n        this.setState({\n            newCardInfo: { ...this.state.newCardInfo, name: cardHolderName }\n        })\n\n    }\n\n    cardNumberHandler = (e) => {\n        let cardNumber = e.target.value;\n        if(cardNumber.length > 19){\n            alert('Card Number length is invalid.')\n        }\n        this.setState({\n            newCardInfo: { ...this.state.newCardInfo, cnumber: cardNumber }\n        })\n    }\n\n    cardLimitHandler = (e) => {\n        let cardlimit = e.target.value;\n        this.setState({\n            newCardInfo: { ...this.state.newCardInfo, climit: cardlimit }\n        })\n    }\n\n    \n    render() {\n        const boxStyle = {\n            width:'50%'\n        }\n        return (\n            <div className=\"App-box\" style={boxStyle}>\n                {this.state.errorMessage && <span className=\"error-message\">{this.state.errorMessage}</span>}\n                <form onSubmit={(e) => { this.newCardInfoSubmit(e) }}>\n                    <TextField type=\"text\" className=\"form-control\" id=\"name\" label=\"Name\" isRequired={true} handleChange={e => this.cardHolderNameHandler(e)}></TextField>\n                    <TextField type=\"number\" className=\"form-control\" id=\"cnumber\" label=\"Card Number\" isRequired={true} handleChange={e => this.cardNumberHandler(e)}></TextField>\n                    <TextField type=\"number\" className=\"form-control\" id=\"climit\" label=\"Card Limit\" isRequired={true} handleChange={e => this.cardLimitHandler(e)}></TextField>\n                    <Button type=\"submit\" className=\"btn btn-primary\" label=\"Add\"></Button>\n                </form>\n            </div>\n        );\n    }\n};\n\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        updateStore: newCardInfo => {\n            dispatch(addNewCardDetails(newCardInfo));\n        }\n    };\n};\n\nexport default connect(null, mapDispatchToProps)(UserCCardFrom);\n","\n\nexport const addNewCardDetails = (cardDetails) => {\n    return {\n        type: \"NEW_CARD\", payload: {\n            id: cardDetails.id,\n            name: cardDetails.name,\n            cnumber: cardDetails.cnumber,\n            climit: cardDetails.climit\n        }\n    }\n}\n\nexport const refreshCardInfo = (cardDetails) => {\n    return {\n        type: \"UPDATE_RECORDS\", payload: cardDetails\n    };\n}","import React from 'react'\nimport CardFormPanel from '../components/UserCCardFrom'\nfunction UserCCardFormContainer (props){\n    \n    return(\n        <div>\n        <h2>Credit Card System</h2>   \n        <h3>Add</h3> \n        <CardFormPanel></CardFormPanel>\n        </div>\n    );\n}\n\n export default UserCCardFormContainer;","\nimport React from 'react'\n\nconst blockIndexCol = {\n    display: 'none'\n\n};\nconst Row = ({ row }) => {\n\n    //Dynamic generated columns.\n    /*\n      let rowId = row ===undefined ? null :Object.values(row).map(r =>( <div className=\"col-sm-4\">{r}</div> ));\n      return (<div className=\"w-100\"><div className=\"row\" key={row.id} style={style}>{rowId}</div></div>)\n  \n\n    return (\n        <div className=\"w-100\">\n            <div className=\"row\" key={row.id}>\n                <div className=\"col-sm-4\" style={blockIndexCol}>{row['id']}</div>\n                <div className=\"col-sm-4\">{row['name']}</div>\n                <div className=\"col-sm-4\">{row['cnumber']}</div>\n                <div className=\"col-sm-4\">{row['climit']}</div>\n            </div>\n\n        </div>\n    )\n    */\n\n    return (\n        <tr>\n            <td>{row['name']}</td>\n            <td>{row['cnumber']}</td>\n            <td>$0</td>\n            <td>{row['climit']}</td>\n        </tr>\n    )\n}\n\nexport default Row;","import React from 'react'\nimport Row from './Row'\n//import CardInfoSchema from '../common/cardInfoSchema'\n\n/*\nconst style = {\n    \"text-align\": \"left\",\n    \"text-transform\": \"uppercase\",\n    \"font-size\": \"medium\",\n    \"font-weight\": \"bold\",\n    \"color\": \"burlywood\",\n    \"padding-bottom\": \"10px\"\n}\n\nfunction TableSheet(headerInfo, rowData) {\n    if (headerInfo === null) {\n        return <div> Data is unavailable.</div>;\n    } else {\n        return (\n            <div className=\"container\">\n                 <div className=\"row\" style={style}>\n                    {headerInfo}\n                </div>\n\n                <div class=\"w-100\"></div>\n                {rowData}\n            </div>\n\n        )\n        \n    }\n}\nconst Table = ({ dataSet }) => {\n\n    let rowData = dataSet.length !== 0 ? dataSet.map(data => (<Row row={data} key={data.id} />)) : null;\n    let headerInfo = dataSet.length === 0 ? null : Object.keys(dataSet[0]).map(d => {\n        let dataSetSchema = CardInfoSchema[d];\n        console.log(\"dataSetSchema \" + dataSetSchema);\n        if (dataSetSchema.enable) {\n            return (<div className=\"col-sm-4\" key={d} scope=\"col\">{dataSetSchema.desc}</div>);\n        }\n        return null;\n\n    });\n    \n   return (TableSheet(headerInfo, rowData));\n}\n*/\nfunction TableSheet(rowData){\n    return (\n        <div className=\"App-box\">\n            <table className=\"table table-bordered\">\n                <thead>\n                    <tr>\n                        <th scope=\"col\">Name</th>\n                        <th scope=\"col\">Card Number</th>\n                        <th scope=\"col\">Balance</th>\n                        <th scope=\"col\">Limit</th>\n                    </tr>\n                </thead>\n                <tbody>{rowData}</tbody>\n                \n            </table>\n        </div>\n    )\n}\nconst Table = ({ dataSet }) => {\n\n    let rowData = dataSet.length !== 0 ? dataSet.map(data => (<Row row={data} key={data.id} />)) : null;\n    return (TableSheet(rowData));\n}\n\n\n\nexport default Table;\n\n\n\n\n","\nimport React, { Component } from 'react'\nimport Table from \"../components/Table\";\nimport { connect } from 'react-redux'\nimport { refreshCardInfo } from '../actions/index'\nconst config = require('../config')\n\nclass TableLayer extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            cardInfoDetails: [],\n            isLoading: true\n        };\n        //this.fetchUserCardDetails = this.fetchUserCardDetails.bind(this);\n    }\n    fetchUserCardDetails() {\n        fetch(config.FETCH_CARD_DETAIL_URL, {\n            method: 'GET',\n            headers: {\n                Accept: 'application/json',\n            },\n        }).then(response => {\n            if (response.ok) {\n                response.json().then(res => {\n                    this.setState({ cardInfoDetails: res, isLoading: false })\n                    this.props.refreshCardInfoDetails(this.state.cardInfoDetails);\n                })\n            }\n        }).catch(e=>{\n            this.setState({ isLoading: false }) \n        });\n    }\n    componentWillMount() {\n        this.fetchUserCardDetails();\n    }\n\n\n    render() {\n        let { cardInfoDetails } = this.props\n        if (cardInfoDetails) {\n            return (\n                <div>\n                    {this.state.isLoading && <i className=\"fa fa-spinner fa-spin\">Loading...</i>}\n                    {!this.state.isLoading && <Table dataSet={cardInfoDetails}></Table>}\n                </div>\n            );\n        } else {\n            return null;\n        }\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        refreshCardInfoDetails: cardInfoDetails => {\n            dispatch(refreshCardInfo(cardInfoDetails));\n        }\n    };\n};\nconst mapStateToProps = state => {\n    return {\n        cardInfoDetails: state.cardDetailsReducer.cardInfoDetails\n    };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TableLayer);\n","import React from 'react'\nimport TableLayer from './TableLayer'\n\nfunction GridViewContainer (){\n    return (\n        <div>\n            <h2>Existing Cards</h2>\n            <TableLayer></TableLayer>\n        </div>\n        \n    )\n}\n\nexport default GridViewContainer;","import React, { Component } from 'react';\n\nimport { createStore, combineReducers } from 'redux';\nimport { Provider } from 'react-redux';\n\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport UserCCardFormContainer from './containers/UserCCardFormContainer'\nimport GridViewContainer from './containers/GridViewContainer'\nimport {saveUserCardDetailsReducer} from './reducers/saveUserCardDetailsReducer'\nimport './App.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css'\n\n\nconst reducer = combineReducers({\n  cardDetailsReducer:saveUserCardDetailsReducer\n});\n\n\nconst store = createStore(reducer, composeWithDevTools());\nfunction App() {\n  return (\n    <div className=\"App-box\">\n      <Provider store={store}>\n        <div className=\"row\">\n          <UserCCardFormContainer />\n        </div>\n        <div className=\"row\">\n          <GridViewContainer></GridViewContainer>\n        </div>\n      </Provider>\n    </div>\n  )\n}\n\nexport default App;\n","export const saveUserCardDetailsReducer = (state = {cardInfoDetails:[]},action)=>{\n    switch(action.type){\n        case \"NEW_CARD\":\n            return {cardInfoDetails:state.cardInfoDetails.concat(action.payload)}\n        case \"UPDATE_RECORDS\":\n            return {cardInfoDetails:action.payload}    \n        default:\n            return state;   \n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}